define("@scom/scom-uniswap-swap-router-contracts/contracts/SwapRouter02.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-uniswap-swap-router-contracts/contracts/SwapRouter02.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factoryV2", "type": "address" }, { "internalType": "address", "name": "factoryV3", "type": "address" }, { "internalType": "address", "name": "_positionManager", "type": "address" }, { "internalType": "address", "name": "_WETH9", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH9", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "approveMax", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "approveMaxMinusOne", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "approveZeroThenMax", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "approveZeroThenMaxMinusOne", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "callPositionManager", "outputs": [{ "internalType": "bytes", "name": "result", "type": "bytes" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "bytes[]", "name": "paths", "type": "bytes[]" }, { "internalType": "uint128[]", "name": "amounts", "type": "uint128[]" }, { "internalType": "uint24", "name": "maximumTickDivergence", "type": "uint24" }, { "internalType": "uint32", "name": "secondsAgo", "type": "uint32" }], "name": "checkOracleSlippage", "outputs": [], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "uint24", "name": "maximumTickDivergence", "type": "uint24" }, { "internalType": "uint32", "name": "secondsAgo", "type": "uint32" }], "name": "checkOracleSlippage", "outputs": [], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMinimum", "type": "uint256" }], "internalType": "struct IV3SwapRouter.ExactInputParams", "name": "params", "type": "tuple" }], "name": "exactInput", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMinimum", "type": "uint256" }, { "internalType": "uint160", "name": "sqrtPriceLimitX96", "type": "uint160" }], "internalType": "struct IV3SwapRouter.ExactInputSingleParams", "name": "params", "type": "tuple" }], "name": "exactInputSingle", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMaximum", "type": "uint256" }], "internalType": "struct IV3SwapRouter.ExactOutputParams", "name": "params", "type": "tuple" }], "name": "exactOutput", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMaximum", "type": "uint256" }, { "internalType": "uint160", "name": "sqrtPriceLimitX96", "type": "uint160" }], "internalType": "struct IV3SwapRouter.ExactOutputSingleParams", "name": "params", "type": "tuple" }], "name": "exactOutputSingle", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factoryV2", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "getApprovalType", "outputs": [{ "internalType": "enum IApproveAndCall.ApprovalType", "name": "", "type": "uint8" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "token0", "type": "address" }, { "internalType": "address", "name": "token1", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount0Min", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Min", "type": "uint256" }], "internalType": "struct IApproveAndCall.IncreaseLiquidityParams", "name": "params", "type": "tuple" }], "name": "increaseLiquidity", "outputs": [{ "internalType": "bytes", "name": "result", "type": "bytes" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "token0", "type": "address" }, { "internalType": "address", "name": "token1", "type": "address" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "int24", "name": "tickLower", "type": "int24" }, { "internalType": "int24", "name": "tickUpper", "type": "int24" }, { "internalType": "uint256", "name": "amount0Min", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Min", "type": "uint256" }, { "internalType": "address", "name": "recipient", "type": "address" }], "internalType": "struct IApproveAndCall.MintParams", "name": "params", "type": "tuple" }], "name": "mint", "outputs": [{ "internalType": "bytes", "name": "result", "type": "bytes" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "previousBlockhash", "type": "bytes32" }, { "internalType": "bytes[]", "name": "data", "type": "bytes[]" }], "name": "multicall", "outputs": [{ "internalType": "bytes[]", "name": "", "type": "bytes[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes[]", "name": "data", "type": "bytes[]" }], "name": "multicall", "outputs": [{ "internalType": "bytes[]", "name": "", "type": "bytes[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "bytes[]", "name": "data", "type": "bytes[]" }], "name": "multicall", "outputs": [{ "internalType": "bytes[]", "name": "results", "type": "bytes[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "positionManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "pull", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "refundETH", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "selfPermit", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }, { "internalType": "uint256", "name": "expiry", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "selfPermitAllowed", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }, { "internalType": "uint256", "name": "expiry", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "selfPermitAllowedIfNecessary", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "selfPermitIfNecessary", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }, { "internalType": "address", "name": "recipient", "type": "address" }], "name": "sweepToken", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }], "name": "sweepToken", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }, { "internalType": "uint256", "name": "feeBips", "type": "uint256" }, { "internalType": "address", "name": "feeRecipient", "type": "address" }], "name": "sweepTokenWithFee", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "feeBips", "type": "uint256" }, { "internalType": "address", "name": "feeRecipient", "type": "address" }], "name": "sweepTokenWithFee", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "int256", "name": "amount0Delta", "type": "int256" }, { "internalType": "int256", "name": "amount1Delta", "type": "int256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "uniswapV3SwapCallback", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }, { "internalType": "address", "name": "recipient", "type": "address" }], "name": "unwrapWETH9", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }], "name": "unwrapWETH9", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "feeBips", "type": "uint256" }, { "internalType": "address", "name": "feeRecipient", "type": "address" }], "name": "unwrapWETH9WithFee", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountMinimum", "type": "uint256" }, { "internalType": "uint256", "name": "feeBips", "type": "uint256" }, { "internalType": "address", "name": "feeRecipient", "type": "address" }], "name": "unwrapWETH9WithFee", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "wrapETH", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/SwapRouter02.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-uniswap-swap-router-contracts/contracts/SwapRouter02.json.ts"], function (require, exports, eth_contract_1, SwapRouter02_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SwapRouter02 = void 0;
    class SwapRouter02 extends eth_contract_1.Contract {
        constructor(wallet, address) {
            super(wallet, address, SwapRouter02_json_1.default.abi, SwapRouter02_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factoryV2, params.factoryV3, params.positionManager, params.WETH9], options);
        }
        assign() {
            let WETH9_call = async (options) => {
                let result = await this.call('WETH9', [], options);
                return result;
            };
            this.WETH9 = WETH9_call;
            let checkOracleSlippageParams = (params) => [this.wallet.utils.stringToBytes(params.paths), this.wallet.utils.toString(params.amounts), this.wallet.utils.toString(params.maximumTickDivergence), this.wallet.utils.toString(params.secondsAgo)];
            let checkOracleSlippage_call = async (params, options) => {
                let result = await this.call('checkOracleSlippage', checkOracleSlippageParams(params), options);
                return;
            };
            this.checkOracleSlippage = checkOracleSlippage_call;
            let checkOracleSlippage_1Params = (params) => [this.wallet.utils.stringToBytes(params.path), this.wallet.utils.toString(params.maximumTickDivergence), this.wallet.utils.toString(params.secondsAgo)];
            let checkOracleSlippage_1_call = async (params, options) => {
                let result = await this.call('checkOracleSlippage', checkOracleSlippage_1Params(params), options);
                return;
            };
            this.checkOracleSlippage_1 = checkOracleSlippage_1_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let factoryV2_call = async (options) => {
                let result = await this.call('factoryV2', [], options);
                return result;
            };
            this.factoryV2 = factoryV2_call;
            let positionManager_call = async (options) => {
                let result = await this.call('positionManager', [], options);
                return result;
            };
            this.positionManager = positionManager_call;
            let approveMax_send = async (token, options) => {
                let result = await this.send('approveMax', [token], options);
                return result;
            };
            let approveMax_call = async (token, options) => {
                let result = await this.call('approveMax', [token], options);
                return;
            };
            let approveMax_txData = async (token, options) => {
                let result = await this.txData('approveMax', [token], options);
                return result;
            };
            this.approveMax = Object.assign(approveMax_send, {
                call: approveMax_call,
                txData: approveMax_txData
            });
            let approveMaxMinusOne_send = async (token, options) => {
                let result = await this.send('approveMaxMinusOne', [token], options);
                return result;
            };
            let approveMaxMinusOne_call = async (token, options) => {
                let result = await this.call('approveMaxMinusOne', [token], options);
                return;
            };
            let approveMaxMinusOne_txData = async (token, options) => {
                let result = await this.txData('approveMaxMinusOne', [token], options);
                return result;
            };
            this.approveMaxMinusOne = Object.assign(approveMaxMinusOne_send, {
                call: approveMaxMinusOne_call,
                txData: approveMaxMinusOne_txData
            });
            let approveZeroThenMax_send = async (token, options) => {
                let result = await this.send('approveZeroThenMax', [token], options);
                return result;
            };
            let approveZeroThenMax_call = async (token, options) => {
                let result = await this.call('approveZeroThenMax', [token], options);
                return;
            };
            let approveZeroThenMax_txData = async (token, options) => {
                let result = await this.txData('approveZeroThenMax', [token], options);
                return result;
            };
            this.approveZeroThenMax = Object.assign(approveZeroThenMax_send, {
                call: approveZeroThenMax_call,
                txData: approveZeroThenMax_txData
            });
            let approveZeroThenMaxMinusOne_send = async (token, options) => {
                let result = await this.send('approveZeroThenMaxMinusOne', [token], options);
                return result;
            };
            let approveZeroThenMaxMinusOne_call = async (token, options) => {
                let result = await this.call('approveZeroThenMaxMinusOne', [token], options);
                return;
            };
            let approveZeroThenMaxMinusOne_txData = async (token, options) => {
                let result = await this.txData('approveZeroThenMaxMinusOne', [token], options);
                return result;
            };
            this.approveZeroThenMaxMinusOne = Object.assign(approveZeroThenMaxMinusOne_send, {
                call: approveZeroThenMaxMinusOne_call,
                txData: approveZeroThenMaxMinusOne_txData
            });
            let callPositionManager_send = async (data, options) => {
                let result = await this.send('callPositionManager', [this.wallet.utils.stringToBytes(data)], options);
                return result;
            };
            let callPositionManager_call = async (data, options) => {
                let result = await this.call('callPositionManager', [this.wallet.utils.stringToBytes(data)], options);
                return result;
            };
            let callPositionManager_txData = async (data, options) => {
                let result = await this.txData('callPositionManager', [this.wallet.utils.stringToBytes(data)], options);
                return result;
            };
            this.callPositionManager = Object.assign(callPositionManager_send, {
                call: callPositionManager_call,
                txData: callPositionManager_txData
            });
            let exactInput_send = async (params, options) => {
                let result = await this.send('exactInput', [[this.wallet.utils.stringToBytes(params.path), params.recipient, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMinimum)]], options);
                return result;
            };
            let exactInput_call = async (params, options) => {
                let result = await this.call('exactInput', [[this.wallet.utils.stringToBytes(params.path), params.recipient, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMinimum)]], options);
                return new eth_contract_1.BigNumber(result);
            };
            let exactInput_txData = async (params, options) => {
                let result = await this.txData('exactInput', [[this.wallet.utils.stringToBytes(params.path), params.recipient, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMinimum)]], options);
                return result;
            };
            this.exactInput = Object.assign(exactInput_send, {
                call: exactInput_call,
                txData: exactInput_txData
            });
            let exactInputSingle_send = async (params, options) => {
                let result = await this.send('exactInputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), params.recipient, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMinimum), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            let exactInputSingle_call = async (params, options) => {
                let result = await this.call('exactInputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), params.recipient, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMinimum), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return new eth_contract_1.BigNumber(result);
            };
            let exactInputSingle_txData = async (params, options) => {
                let result = await this.txData('exactInputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), params.recipient, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMinimum), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            this.exactInputSingle = Object.assign(exactInputSingle_send, {
                call: exactInputSingle_call,
                txData: exactInputSingle_txData
            });
            let exactOutput_send = async (params, options) => {
                let result = await this.send('exactOutput', [[this.wallet.utils.stringToBytes(params.path), params.recipient, this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMaximum)]], options);
                return result;
            };
            let exactOutput_call = async (params, options) => {
                let result = await this.call('exactOutput', [[this.wallet.utils.stringToBytes(params.path), params.recipient, this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMaximum)]], options);
                return new eth_contract_1.BigNumber(result);
            };
            let exactOutput_txData = async (params, options) => {
                let result = await this.txData('exactOutput', [[this.wallet.utils.stringToBytes(params.path), params.recipient, this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMaximum)]], options);
                return result;
            };
            this.exactOutput = Object.assign(exactOutput_send, {
                call: exactOutput_call,
                txData: exactOutput_txData
            });
            let exactOutputSingle_send = async (params, options) => {
                let result = await this.send('exactOutputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), params.recipient, this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMaximum), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            let exactOutputSingle_call = async (params, options) => {
                let result = await this.call('exactOutputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), params.recipient, this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMaximum), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return new eth_contract_1.BigNumber(result);
            };
            let exactOutputSingle_txData = async (params, options) => {
                let result = await this.txData('exactOutputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), params.recipient, this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMaximum), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            this.exactOutputSingle = Object.assign(exactOutputSingle_send, {
                call: exactOutputSingle_call,
                txData: exactOutputSingle_txData
            });
            let getApprovalTypeParams = (params) => [params.token, this.wallet.utils.toString(params.amount)];
            let getApprovalType_send = async (params, options) => {
                let result = await this.send('getApprovalType', getApprovalTypeParams(params), options);
                return result;
            };
            let getApprovalType_call = async (params, options) => {
                let result = await this.call('getApprovalType', getApprovalTypeParams(params), options);
                return new eth_contract_1.BigNumber(result);
            };
            let getApprovalType_txData = async (params, options) => {
                let result = await this.txData('getApprovalType', getApprovalTypeParams(params), options);
                return result;
            };
            this.getApprovalType = Object.assign(getApprovalType_send, {
                call: getApprovalType_call,
                txData: getApprovalType_txData
            });
            let increaseLiquidity_send = async (params, options) => {
                let result = await this.send('increaseLiquidity', [[params.token0, params.token1, this.wallet.utils.toString(params.tokenId), this.wallet.utils.toString(params.amount0Min), this.wallet.utils.toString(params.amount1Min)]], options);
                return result;
            };
            let increaseLiquidity_call = async (params, options) => {
                let result = await this.call('increaseLiquidity', [[params.token0, params.token1, this.wallet.utils.toString(params.tokenId), this.wallet.utils.toString(params.amount0Min), this.wallet.utils.toString(params.amount1Min)]], options);
                return result;
            };
            let increaseLiquidity_txData = async (params, options) => {
                let result = await this.txData('increaseLiquidity', [[params.token0, params.token1, this.wallet.utils.toString(params.tokenId), this.wallet.utils.toString(params.amount0Min), this.wallet.utils.toString(params.amount1Min)]], options);
                return result;
            };
            this.increaseLiquidity = Object.assign(increaseLiquidity_send, {
                call: increaseLiquidity_call,
                txData: increaseLiquidity_txData
            });
            let mint_send = async (params, options) => {
                let result = await this.send('mint', [[params.token0, params.token1, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.tickLower), this.wallet.utils.toString(params.tickUpper), this.wallet.utils.toString(params.amount0Min), this.wallet.utils.toString(params.amount1Min), params.recipient]], options);
                return result;
            };
            let mint_call = async (params, options) => {
                let result = await this.call('mint', [[params.token0, params.token1, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.tickLower), this.wallet.utils.toString(params.tickUpper), this.wallet.utils.toString(params.amount0Min), this.wallet.utils.toString(params.amount1Min), params.recipient]], options);
                return result;
            };
            let mint_txData = async (params, options) => {
                let result = await this.txData('mint', [[params.token0, params.token1, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.tickLower), this.wallet.utils.toString(params.tickUpper), this.wallet.utils.toString(params.amount0Min), this.wallet.utils.toString(params.amount1Min), params.recipient]], options);
                return result;
            };
            this.mint = Object.assign(mint_send, {
                call: mint_call,
                txData: mint_txData
            });
            let multicallParams = (params) => [this.wallet.utils.stringToBytes32(params.previousBlockhash), this.wallet.utils.stringToBytes(params.data)];
            let multicall_send = async (params, options) => {
                let result = await this.send('multicall', multicallParams(params), options);
                return result;
            };
            let multicall_call = async (params, options) => {
                let result = await this.call('multicall', multicallParams(params), options);
                return result;
            };
            let multicall_txData = async (params, options) => {
                let result = await this.txData('multicall', multicallParams(params), options);
                return result;
            };
            this.multicall = Object.assign(multicall_send, {
                call: multicall_call,
                txData: multicall_txData
            });
            let multicall_1Params = (params) => [this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let multicall_1_send = async (params, options) => {
                let result = await this.send('multicall', multicall_1Params(params), options);
                return result;
            };
            let multicall_1_call = async (params, options) => {
                let result = await this.call('multicall', multicall_1Params(params), options);
                return result;
            };
            let multicall_1_txData = async (params, options) => {
                let result = await this.txData('multicall', multicall_1Params(params), options);
                return result;
            };
            this.multicall_1 = Object.assign(multicall_1_send, {
                call: multicall_1_call,
                txData: multicall_1_txData
            });
            let multicall_2_send = async (data, options) => {
                let result = await this.send('multicall', [this.wallet.utils.stringToBytes(data)], options);
                return result;
            };
            let multicall_2_call = async (data, options) => {
                let result = await this.call('multicall', [this.wallet.utils.stringToBytes(data)], options);
                return result;
            };
            let multicall_2_txData = async (data, options) => {
                let result = await this.txData('multicall', [this.wallet.utils.stringToBytes(data)], options);
                return result;
            };
            this.multicall_2 = Object.assign(multicall_2_send, {
                call: multicall_2_call,
                txData: multicall_2_txData
            });
            let pullParams = (params) => [params.token, this.wallet.utils.toString(params.value)];
            let pull_send = async (params, options) => {
                let result = await this.send('pull', pullParams(params), options);
                return result;
            };
            let pull_call = async (params, options) => {
                let result = await this.call('pull', pullParams(params), options);
                return;
            };
            let pull_txData = async (params, options) => {
                let result = await this.txData('pull', pullParams(params), options);
                return result;
            };
            this.pull = Object.assign(pull_send, {
                call: pull_call,
                txData: pull_txData
            });
            let refundETH_send = async (options) => {
                let result = await this.send('refundETH', [], options);
                return result;
            };
            let refundETH_call = async (options) => {
                let result = await this.call('refundETH', [], options);
                return;
            };
            let refundETH_txData = async (options) => {
                let result = await this.txData('refundETH', [], options);
                return result;
            };
            this.refundETH = Object.assign(refundETH_send, {
                call: refundETH_call,
                txData: refundETH_txData
            });
            let selfPermitParams = (params) => [params.token, this.wallet.utils.toString(params.value), this.wallet.utils.toString(params.deadline), this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let selfPermit_send = async (params, options) => {
                let result = await this.send('selfPermit', selfPermitParams(params), options);
                return result;
            };
            let selfPermit_call = async (params, options) => {
                let result = await this.call('selfPermit', selfPermitParams(params), options);
                return;
            };
            let selfPermit_txData = async (params, options) => {
                let result = await this.txData('selfPermit', selfPermitParams(params), options);
                return result;
            };
            this.selfPermit = Object.assign(selfPermit_send, {
                call: selfPermit_call,
                txData: selfPermit_txData
            });
            let selfPermitAllowedParams = (params) => [params.token, this.wallet.utils.toString(params.nonce), this.wallet.utils.toString(params.expiry), this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let selfPermitAllowed_send = async (params, options) => {
                let result = await this.send('selfPermitAllowed', selfPermitAllowedParams(params), options);
                return result;
            };
            let selfPermitAllowed_call = async (params, options) => {
                let result = await this.call('selfPermitAllowed', selfPermitAllowedParams(params), options);
                return;
            };
            let selfPermitAllowed_txData = async (params, options) => {
                let result = await this.txData('selfPermitAllowed', selfPermitAllowedParams(params), options);
                return result;
            };
            this.selfPermitAllowed = Object.assign(selfPermitAllowed_send, {
                call: selfPermitAllowed_call,
                txData: selfPermitAllowed_txData
            });
            let selfPermitAllowedIfNecessaryParams = (params) => [params.token, this.wallet.utils.toString(params.nonce), this.wallet.utils.toString(params.expiry), this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let selfPermitAllowedIfNecessary_send = async (params, options) => {
                let result = await this.send('selfPermitAllowedIfNecessary', selfPermitAllowedIfNecessaryParams(params), options);
                return result;
            };
            let selfPermitAllowedIfNecessary_call = async (params, options) => {
                let result = await this.call('selfPermitAllowedIfNecessary', selfPermitAllowedIfNecessaryParams(params), options);
                return;
            };
            let selfPermitAllowedIfNecessary_txData = async (params, options) => {
                let result = await this.txData('selfPermitAllowedIfNecessary', selfPermitAllowedIfNecessaryParams(params), options);
                return result;
            };
            this.selfPermitAllowedIfNecessary = Object.assign(selfPermitAllowedIfNecessary_send, {
                call: selfPermitAllowedIfNecessary_call,
                txData: selfPermitAllowedIfNecessary_txData
            });
            let selfPermitIfNecessaryParams = (params) => [params.token, this.wallet.utils.toString(params.value), this.wallet.utils.toString(params.deadline), this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let selfPermitIfNecessary_send = async (params, options) => {
                let result = await this.send('selfPermitIfNecessary', selfPermitIfNecessaryParams(params), options);
                return result;
            };
            let selfPermitIfNecessary_call = async (params, options) => {
                let result = await this.call('selfPermitIfNecessary', selfPermitIfNecessaryParams(params), options);
                return;
            };
            let selfPermitIfNecessary_txData = async (params, options) => {
                let result = await this.txData('selfPermitIfNecessary', selfPermitIfNecessaryParams(params), options);
                return result;
            };
            this.selfPermitIfNecessary = Object.assign(selfPermitIfNecessary_send, {
                call: selfPermitIfNecessary_call,
                txData: selfPermitIfNecessary_txData
            });
            let swapExactTokensForTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to];
            let swapExactTokensForTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return new eth_contract_1.BigNumber(result);
            };
            let swapExactTokensForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
                call: swapExactTokensForTokens_call,
                txData: swapExactTokensForTokens_txData
            });
            let swapTokensForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.path, params.to];
            let swapTokensForExactTokens_send = async (params, options) => {
                let result = await this.send('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            let swapTokensForExactTokens_call = async (params, options) => {
                let result = await this.call('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return new eth_contract_1.BigNumber(result);
            };
            let swapTokensForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
                call: swapTokensForExactTokens_call,
                txData: swapTokensForExactTokens_txData
            });
            let sweepTokenParams = (params) => [params.token, this.wallet.utils.toString(params.amountMinimum), params.recipient];
            let sweepToken_send = async (params, options) => {
                let result = await this.send('sweepToken', sweepTokenParams(params), options);
                return result;
            };
            let sweepToken_call = async (params, options) => {
                let result = await this.call('sweepToken', sweepTokenParams(params), options);
                return;
            };
            let sweepToken_txData = async (params, options) => {
                let result = await this.txData('sweepToken', sweepTokenParams(params), options);
                return result;
            };
            this.sweepToken = Object.assign(sweepToken_send, {
                call: sweepToken_call,
                txData: sweepToken_txData
            });
            let sweepToken_1Params = (params) => [params.token, this.wallet.utils.toString(params.amountMinimum)];
            let sweepToken_1_send = async (params, options) => {
                let result = await this.send('sweepToken', sweepToken_1Params(params), options);
                return result;
            };
            let sweepToken_1_call = async (params, options) => {
                let result = await this.call('sweepToken', sweepToken_1Params(params), options);
                return;
            };
            let sweepToken_1_txData = async (params, options) => {
                let result = await this.txData('sweepToken', sweepToken_1Params(params), options);
                return result;
            };
            this.sweepToken_1 = Object.assign(sweepToken_1_send, {
                call: sweepToken_1_call,
                txData: sweepToken_1_txData
            });
            let sweepTokenWithFeeParams = (params) => [params.token, this.wallet.utils.toString(params.amountMinimum), this.wallet.utils.toString(params.feeBips), params.feeRecipient];
            let sweepTokenWithFee_send = async (params, options) => {
                let result = await this.send('sweepTokenWithFee', sweepTokenWithFeeParams(params), options);
                return result;
            };
            let sweepTokenWithFee_call = async (params, options) => {
                let result = await this.call('sweepTokenWithFee', sweepTokenWithFeeParams(params), options);
                return;
            };
            let sweepTokenWithFee_txData = async (params, options) => {
                let result = await this.txData('sweepTokenWithFee', sweepTokenWithFeeParams(params), options);
                return result;
            };
            this.sweepTokenWithFee = Object.assign(sweepTokenWithFee_send, {
                call: sweepTokenWithFee_call,
                txData: sweepTokenWithFee_txData
            });
            let sweepTokenWithFee_1Params = (params) => [params.token, this.wallet.utils.toString(params.amountMinimum), params.recipient, this.wallet.utils.toString(params.feeBips), params.feeRecipient];
            let sweepTokenWithFee_1_send = async (params, options) => {
                let result = await this.send('sweepTokenWithFee', sweepTokenWithFee_1Params(params), options);
                return result;
            };
            let sweepTokenWithFee_1_call = async (params, options) => {
                let result = await this.call('sweepTokenWithFee', sweepTokenWithFee_1Params(params), options);
                return;
            };
            let sweepTokenWithFee_1_txData = async (params, options) => {
                let result = await this.txData('sweepTokenWithFee', sweepTokenWithFee_1Params(params), options);
                return result;
            };
            this.sweepTokenWithFee_1 = Object.assign(sweepTokenWithFee_1_send, {
                call: sweepTokenWithFee_1_call,
                txData: sweepTokenWithFee_1_txData
            });
            let uniswapV3SwapCallbackParams = (params) => [this.wallet.utils.toString(params.amount0Delta), this.wallet.utils.toString(params.amount1Delta), this.wallet.utils.stringToBytes(params.data)];
            let uniswapV3SwapCallback_send = async (params, options) => {
                let result = await this.send('uniswapV3SwapCallback', uniswapV3SwapCallbackParams(params), options);
                return result;
            };
            let uniswapV3SwapCallback_call = async (params, options) => {
                let result = await this.call('uniswapV3SwapCallback', uniswapV3SwapCallbackParams(params), options);
                return;
            };
            let uniswapV3SwapCallback_txData = async (params, options) => {
                let result = await this.txData('uniswapV3SwapCallback', uniswapV3SwapCallbackParams(params), options);
                return result;
            };
            this.uniswapV3SwapCallback = Object.assign(uniswapV3SwapCallback_send, {
                call: uniswapV3SwapCallback_call,
                txData: uniswapV3SwapCallback_txData
            });
            let unwrapWETH9Params = (params) => [this.wallet.utils.toString(params.amountMinimum), params.recipient];
            let unwrapWETH9_send = async (params, options) => {
                let result = await this.send('unwrapWETH9', unwrapWETH9Params(params), options);
                return result;
            };
            let unwrapWETH9_call = async (params, options) => {
                let result = await this.call('unwrapWETH9', unwrapWETH9Params(params), options);
                return;
            };
            let unwrapWETH9_txData = async (params, options) => {
                let result = await this.txData('unwrapWETH9', unwrapWETH9Params(params), options);
                return result;
            };
            this.unwrapWETH9 = Object.assign(unwrapWETH9_send, {
                call: unwrapWETH9_call,
                txData: unwrapWETH9_txData
            });
            let unwrapWETH9_1_send = async (amountMinimum, options) => {
                let result = await this.send('unwrapWETH9', [this.wallet.utils.toString(amountMinimum)], options);
                return result;
            };
            let unwrapWETH9_1_call = async (amountMinimum, options) => {
                let result = await this.call('unwrapWETH9', [this.wallet.utils.toString(amountMinimum)], options);
                return;
            };
            let unwrapWETH9_1_txData = async (amountMinimum, options) => {
                let result = await this.txData('unwrapWETH9', [this.wallet.utils.toString(amountMinimum)], options);
                return result;
            };
            this.unwrapWETH9_1 = Object.assign(unwrapWETH9_1_send, {
                call: unwrapWETH9_1_call,
                txData: unwrapWETH9_1_txData
            });
            let unwrapWETH9WithFeeParams = (params) => [this.wallet.utils.toString(params.amountMinimum), params.recipient, this.wallet.utils.toString(params.feeBips), params.feeRecipient];
            let unwrapWETH9WithFee_send = async (params, options) => {
                let result = await this.send('unwrapWETH9WithFee', unwrapWETH9WithFeeParams(params), options);
                return result;
            };
            let unwrapWETH9WithFee_call = async (params, options) => {
                let result = await this.call('unwrapWETH9WithFee', unwrapWETH9WithFeeParams(params), options);
                return;
            };
            let unwrapWETH9WithFee_txData = async (params, options) => {
                let result = await this.txData('unwrapWETH9WithFee', unwrapWETH9WithFeeParams(params), options);
                return result;
            };
            this.unwrapWETH9WithFee = Object.assign(unwrapWETH9WithFee_send, {
                call: unwrapWETH9WithFee_call,
                txData: unwrapWETH9WithFee_txData
            });
            let unwrapWETH9WithFee_1Params = (params) => [this.wallet.utils.toString(params.amountMinimum), this.wallet.utils.toString(params.feeBips), params.feeRecipient];
            let unwrapWETH9WithFee_1_send = async (params, options) => {
                let result = await this.send('unwrapWETH9WithFee', unwrapWETH9WithFee_1Params(params), options);
                return result;
            };
            let unwrapWETH9WithFee_1_call = async (params, options) => {
                let result = await this.call('unwrapWETH9WithFee', unwrapWETH9WithFee_1Params(params), options);
                return;
            };
            let unwrapWETH9WithFee_1_txData = async (params, options) => {
                let result = await this.txData('unwrapWETH9WithFee', unwrapWETH9WithFee_1Params(params), options);
                return result;
            };
            this.unwrapWETH9WithFee_1 = Object.assign(unwrapWETH9WithFee_1_send, {
                call: unwrapWETH9WithFee_1_call,
                txData: unwrapWETH9WithFee_1_txData
            });
            let wrapETH_send = async (value, options) => {
                let result = await this.send('wrapETH', [this.wallet.utils.toString(value)], options);
                return result;
            };
            let wrapETH_call = async (value, options) => {
                let result = await this.call('wrapETH', [this.wallet.utils.toString(value)], options);
                return;
            };
            let wrapETH_txData = async (value, options) => {
                let result = await this.txData('wrapETH', [this.wallet.utils.toString(value)], options);
                return result;
            };
            this.wrapETH = Object.assign(wrapETH_send, {
                call: wrapETH_call,
                txData: wrapETH_txData
            });
        }
    }
    SwapRouter02._abi = SwapRouter02_json_1.default.abi;
    exports.SwapRouter02 = SwapRouter02;
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/MixedRouteQuoterV1.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-uniswap-swap-router-contracts/contracts/MixedRouteQuoterV1.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_factoryV2", "type": "address" }, { "internalType": "address", "name": "_WETH9", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH9", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factoryV2", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "name": "quoteExactInput", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint160[]", "name": "v3SqrtPriceX96AfterList", "type": "uint160[]" }, { "internalType": "uint32[]", "name": "v3InitializedTicksCrossedList", "type": "uint32[]" }, { "internalType": "uint256", "name": "v3SwapGasEstimate", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "internalType": "struct IMixedRouteQuoterV1.QuoteExactInputSingleV2Params", "name": "params", "type": "tuple" }], "name": "quoteExactInputSingleV2", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "uint160", "name": "sqrtPriceLimitX96", "type": "uint160" }], "internalType": "struct IMixedRouteQuoterV1.QuoteExactInputSingleV3Params", "name": "params", "type": "tuple" }], "name": "quoteExactInputSingleV3", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint160", "name": "sqrtPriceX96After", "type": "uint160" }, { "internalType": "uint32", "name": "initializedTicksCrossed", "type": "uint32" }, { "internalType": "uint256", "name": "gasEstimate", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "int256", "name": "amount0Delta", "type": "int256" }, { "internalType": "int256", "name": "amount1Delta", "type": "int256" }, { "internalType": "bytes", "name": "path", "type": "bytes" }], "name": "uniswapV3SwapCallback", "outputs": [], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "0x60e06040523480156200001157600080fd5b506040516200225438038062002254833981016040819052620000349162000078565b6001600160601b0319606093841b811660805290831b811660a052911b1660c052620000c1565b80516001600160a01b03811681146200007357600080fd5b919050565b6000806000606084860312156200008d578283fd5b62000098846200005b565b9250620000a8602085016200005b565b9150620000b8604085016200005b565b90509250925092565b60805160601c60a05160601c60c05160601c61214e620001066000398061015152806107b052508061012d52508061036d528061061252806107f6525061214e6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b174a0a71161005b578063b174a0a7146100c8578063c45a0155146100eb578063cdca1753146100f3578063fa461e33146101165761007d565b80634aa4a4fc1461008257806368e0d4e1146100a05780638a499286146100a8575b600080fd5b61008a61012b565b6040516100979190611ea7565b60405180910390f35b61008a61014f565b6100bb6100b6366004611c32565b610173565b6040516100979190611fa0565b6100db6100d6366004611c96565b610192565b6040516100979493929190612051565b61008a61036b565b610106610101366004611b14565b61038f565b6040516100979493929190611fa9565b610129610124366004611b7a565b6105e1565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061018c8260400151836000015184602001516107a6565b92915050565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926101d092906107ef565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856102028c6040015161082d565b60808d015173ffffffffffffffffffffffffffffffffffffffff161561022c578c60800151610252565b8761024b5773fffd8963efd1fc6a506488495d951d5263988d25610252565b6401000276a45b8d600001518e606001518f6020015160405160200161027393929190611e41565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102a2959493929190611ec8565b6040805180830381600087803b1580156102bb57600080fd5b505af1925050508015610309575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261030691810190611b57565b60015b61035e573d808015610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b505a8203945061034d81848761085f565b975097509750975050505050610364565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606080600061039f86610933565b67ffffffffffffffff811180156103b557600080fd5b506040519080825280602002602001820160405280156103df578160200160208202803683370190505b5092506103eb86610933565b67ffffffffffffffff8111801561040157600080fd5b5060405190808252806020026020018201604052801561042b578160200160208202803683370190505b50915060005b600080600061043f8a610962565b91945092509050628000008116156104a7576104a060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018b815250610173565b98506105a0565b6000806000806105246040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610192565b9350935093509350828b898151811061053957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a898151811061058057fe5b63ffffffff90921660209283029190910190910152929b50505094909401935b6001909301926105af8a610993565b156105c4576105bd8a61099b565b99506105d0565b889750505050506105d8565b505050610431565b92959194509250565b60008313806105f05750600082135b6105f957600080fd5b600080600061060784610962565b9250925092506106397f00000000000000000000000000000000000000000000000000000000000000008484846109d0565b506000806000881361067d578473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610886000036106b1565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610876000035b9150915060006106c28686866107ef565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190611d23565b505050505091509150841561076b57604051848152826020820152816040820152606081fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90611f6b565b60405180910390fd5b60008060006107d67f000000000000000000000000000000000000000000000000000000000000000086866109ef565b915091506107e5868383610ad7565b9695505050505050565b60006108257f0000000000000000000000000000000000000000000000000000000000000000610820868686610bad565b610c2a565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061085b57600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190611d23565b509396506108fb94508d9350610d6092505050565b9197509550905061092373ffffffffffffffffffffffffffffffffffffffff89168383610e18565b9350869250505093509350935093565b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b600080806109708482611470565b925061097d846014611570565b905061098a846017611470565b91509193909250565b516042111590565b805160609061018c9083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611660565b60006109e6856109e1868686610bad565b611847565b95945050505050565b60008060006109fe8585611877565b509050600080610a0f88888861191c565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610a5457600080fd5b505afa158015610a68573d6000803e3d6000fd5b505050506040513d6060811015610a7e57600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff87811690841614610ac5578082610ac8565b81815b90999098509650505050505050565b6000808411610b4757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b600083118015610b575750600082115b610b6057600080fd5b6000610b6e856103e5611a07565b90506000610b7c8285611a07565b90506000610b9683610b90886103e8611a07565b90611a2b565b9050808281610ba157fe5b04979650505050505050565b610bb5611a74565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610bed579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c6c57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014610df757604484511015610daa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90611f34565b60048401935083806020019051810190610dc49190611bc8565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d9190611f1a565b83806020019051810190610e0b9190611dba565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b5051600290810b908c900b81610ea857fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d6020811015610f2557600080fd5b5051600290810b908d900b81610f3757fe5b0560020b81610f4257fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8f57600080fd5b505afa158015610fa3573d6000803e3d6000fd5b505050506040513d6020811015610fb957600080fd5b5051600290810b908d900b81610fcb57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101e57600080fd5b505afa158015611032573d6000803e3d6000fd5b505050506040513d602081101561104857600080fd5b5051600290810b908e900b8161105a57fe5b0560020b8161106557fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156110c657600080fd5b505afa1580156110da573d6000803e3d6000fd5b505050506040513d60208110156110f057600080fd5b50511611801561118357508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561114157600080fd5b505afa158015611155573d6000803e3d6000fd5b505050506040513d602081101561116b57600080fd5b5051600290810b908d900b8161117d57fe5b0760020b155b801561119457508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156111f457600080fd5b505afa158015611208573d6000803e3d6000fd5b505050506040513d602081101561121e57600080fd5b5051161180156112b157508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561126f57600080fd5b505afa158015611283573d6000803e3d6000fd5b505050506040513d602081101561129957600080fd5b5051600290810b908e900b816112ab57fe5b0760020b155b80156112c257508b60020b8d60020b125b95508160010b8460010b12806112ee57508160010b8460010b1480156112ee57508060ff168360ff1611155b1561130457839950829750819850809650611311565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611448578560010b8760010b1415611382577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156113d957600080fd5b505afa1580156113ed573d6000803e3d6000fd5b505050506040513d602081101561140357600080fd5b505116905061141181611a3b565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61133d565b8115611455576001880397505b8215611462576001880397505b505050505050509392505050565b6000818260140110156114e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b816014018351101561155757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6000818260030110156115e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b816003018351101561165757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f0110156116d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b82828401101561174557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b818301845110156117b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b6060821580156117d6576040519150600082526020820160405261183e565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561180f5780518352602092830192016117f7565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60006118538383610c2a565b90503373ffffffffffffffffffffffffffffffffffffffff82161461018c57600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118b357600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106118ed5782846118f0565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661191557600080fd5b9250929050565b600080600061192b8585611877565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6000821580611a2257505081810281838281611a1f57fe5b04145b61018c57600080fd5b8082018281101561018c57600080fd5b6000805b821561018c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830190921691600101611a3f565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611aa4578081fd5b8135611ab7611ab2826120ac565b612088565b818152846020838601011115611acb578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b811461095d57600080fd5b803561095d8161211c565b805161ffff8116811461095d57600080fd5b60008060408385031215611b26578182fd5b823567ffffffffffffffff811115611b3c578283fd5b611b4885828601611a94565b95602094909401359450505050565b60008060408385031215611b69578182fd5b505080516020909101519092909150565b600080600060608486031215611b8e578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bb2578182fd5b611bbe86828701611a94565b9150509250925092565b600060208284031215611bd9578081fd5b815167ffffffffffffffff811115611bef578182fd5b8201601f81018413611bff578182fd5b8051611c0d611ab2826120ac565b818152856020838501011115611c21578384fd5b6109e68260208301602086016120ec565b600060608284031215611c43578081fd5b6040516060810181811067ffffffffffffffff82111715611c6057fe5b6040528235611c6e8161211c565b81526020830135611c7e8161211c565b60208201526040928301359281019290925250919050565b600060a08284031215611ca7578081fd5b60405160a0810181811067ffffffffffffffff82111715611cc457fe5b6040528235611cd28161211c565b81526020830135611ce28161211c565b602082015260408381013590820152606083013562ffffff81168114611d06578283fd5b6060820152611d1760808401611af7565b60808201529392505050565b600080600080600080600060e0888a031215611d3d578283fd5b8751611d488161211c565b9650611d5660208901611ae5565b9550611d6460408901611b02565b9450611d7260608901611b02565b9350611d8060808901611b02565b925060a088015160ff81168114611d95578283fd5b60c08901519092508015158114611daa578182fd5b8091505092959891949750929550565b600080600060608486031215611dce578081fd5b835192506020840151611de08161211c565b9150611dee60408501611ae5565b90509250925092565b60008151808452611e0f8160208601602086016120ec565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611f0f60a0830184611df7565b979650505050505050565b600060208252611f2d6020830184611df7565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b6020808252818101527f4578616374206f75747075742071756f7465206e6f7420737570706f72746564604082015260600190565b90815260200190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611fff57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611fcd565b505084810360408601528651808252908201925081870190845b8181101561203b57825163ffffffff1685529383019391830191600101612019565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156120a457fe5b604052919050565b600067ffffffffffffffff8211156120c057fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156121075781810151838201526020016120ef565b83811115612116576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461213e57600080fd5b5056fea164736f6c6343000706000a"
    };
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/MixedRouteQuoterV1.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-uniswap-swap-router-contracts/contracts/MixedRouteQuoterV1.json.ts"], function (require, exports, eth_contract_2, MixedRouteQuoterV1_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MixedRouteQuoterV1 = void 0;
    class MixedRouteQuoterV1 extends eth_contract_2.Contract {
        constructor(wallet, address) {
            super(wallet, address, MixedRouteQuoterV1_json_1.default.abi, MixedRouteQuoterV1_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.factoryV2, params.WETH9], options);
        }
        assign() {
            let WETH9_call = async (options) => {
                let result = await this.call('WETH9', [], options);
                return result;
            };
            this.WETH9 = WETH9_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let factoryV2_call = async (options) => {
                let result = await this.call('factoryV2', [], options);
                return result;
            };
            this.factoryV2 = factoryV2_call;
            let quoteExactInputSingleV2_call = async (params, options) => {
                let result = await this.call('quoteExactInputSingleV2', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amountIn)]], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.quoteExactInputSingleV2 = quoteExactInputSingleV2_call;
            let uniswapV3SwapCallbackParams = (params) => [this.wallet.utils.toString(params.amount0Delta), this.wallet.utils.toString(params.amount1Delta), this.wallet.utils.stringToBytes(params.path)];
            let uniswapV3SwapCallback_call = async (params, options) => {
                let result = await this.call('uniswapV3SwapCallback', uniswapV3SwapCallbackParams(params), options);
                return;
            };
            this.uniswapV3SwapCallback = uniswapV3SwapCallback_call;
            let quoteExactInputParams = (params) => [this.wallet.utils.stringToBytes(params.path), this.wallet.utils.toString(params.amountIn)];
            let quoteExactInput_send = async (params, options) => {
                let result = await this.send('quoteExactInput', quoteExactInputParams(params), options);
                return result;
            };
            let quoteExactInput_call = async (params, options) => {
                let result = await this.call('quoteExactInput', quoteExactInputParams(params), options);
                return {
                    amountOut: new eth_contract_2.BigNumber(result.amountOut),
                    v3SqrtPriceX96AfterList: result.v3SqrtPriceX96AfterList.map(e => new eth_contract_2.BigNumber(e)),
                    v3InitializedTicksCrossedList: result.v3InitializedTicksCrossedList.map(e => new eth_contract_2.BigNumber(e)),
                    v3SwapGasEstimate: new eth_contract_2.BigNumber(result.v3SwapGasEstimate)
                };
            };
            let quoteExactInput_txData = async (params, options) => {
                let result = await this.txData('quoteExactInput', quoteExactInputParams(params), options);
                return result;
            };
            this.quoteExactInput = Object.assign(quoteExactInput_send, {
                call: quoteExactInput_call,
                txData: quoteExactInput_txData
            });
            let quoteExactInputSingleV3_send = async (params, options) => {
                let result = await this.send('quoteExactInputSingleV3', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            let quoteExactInputSingleV3_call = async (params, options) => {
                let result = await this.call('quoteExactInputSingleV3', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return {
                    amountOut: new eth_contract_2.BigNumber(result.amountOut),
                    sqrtPriceX96After: new eth_contract_2.BigNumber(result.sqrtPriceX96After),
                    initializedTicksCrossed: new eth_contract_2.BigNumber(result.initializedTicksCrossed),
                    gasEstimate: new eth_contract_2.BigNumber(result.gasEstimate)
                };
            };
            let quoteExactInputSingleV3_txData = async (params, options) => {
                let result = await this.txData('quoteExactInputSingleV3', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            this.quoteExactInputSingleV3 = Object.assign(quoteExactInputSingleV3_send, {
                call: quoteExactInputSingleV3_call,
                txData: quoteExactInputSingleV3_txData
            });
        }
    }
    MixedRouteQuoterV1._abi = MixedRouteQuoterV1_json_1.default.abi;
    exports.MixedRouteQuoterV1 = MixedRouteQuoterV1;
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/Quoter.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-uniswap-swap-router-contracts/contracts/Quoter.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH9", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH9", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "name": "quoteExactInput", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint160", "name": "sqrtPriceLimitX96", "type": "uint160" }], "name": "quoteExactInputSingle", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "name": "quoteExactOutput", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint160", "name": "sqrtPriceLimitX96", "type": "uint160" }], "name": "quoteExactOutputSingle", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "int256", "name": "amount0Delta", "type": "int256" }, { "internalType": "int256", "name": "amount1Delta", "type": "int256" }, { "internalType": "bytes", "name": "path", "type": "bytes" }], "name": "uniswapV3SwapCallback", "outputs": [], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "0x60c060405234801561001057600080fd5b506040516112e53803806112e583398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c6112176100ce60003980610342525080610366528061058652806106d552506112176000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea164736f6c6343000706000a"
    };
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/Quoter.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-uniswap-swap-router-contracts/contracts/Quoter.json.ts"], function (require, exports, eth_contract_3, Quoter_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Quoter = void 0;
    class Quoter extends eth_contract_3.Contract {
        constructor(wallet, address) {
            super(wallet, address, Quoter_json_1.default.abi, Quoter_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH9], options);
        }
        assign() {
            let WETH9_call = async (options) => {
                let result = await this.call('WETH9', [], options);
                return result;
            };
            this.WETH9 = WETH9_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let uniswapV3SwapCallbackParams = (params) => [this.wallet.utils.toString(params.amount0Delta), this.wallet.utils.toString(params.amount1Delta), this.wallet.utils.stringToBytes(params.path)];
            let uniswapV3SwapCallback_call = async (params, options) => {
                let result = await this.call('uniswapV3SwapCallback', uniswapV3SwapCallbackParams(params), options);
                return;
            };
            this.uniswapV3SwapCallback = uniswapV3SwapCallback_call;
            let quoteExactInputParams = (params) => [this.wallet.utils.stringToBytes(params.path), this.wallet.utils.toString(params.amountIn)];
            let quoteExactInput_send = async (params, options) => {
                let result = await this.send('quoteExactInput', quoteExactInputParams(params), options);
                return result;
            };
            let quoteExactInput_call = async (params, options) => {
                let result = await this.call('quoteExactInput', quoteExactInputParams(params), options);
                return new eth_contract_3.BigNumber(result);
            };
            let quoteExactInput_txData = async (params, options) => {
                let result = await this.txData('quoteExactInput', quoteExactInputParams(params), options);
                return result;
            };
            this.quoteExactInput = Object.assign(quoteExactInput_send, {
                call: quoteExactInput_call,
                txData: quoteExactInput_txData
            });
            let quoteExactInputSingleParams = (params) => [params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.sqrtPriceLimitX96)];
            let quoteExactInputSingle_send = async (params, options) => {
                let result = await this.send('quoteExactInputSingle', quoteExactInputSingleParams(params), options);
                return result;
            };
            let quoteExactInputSingle_call = async (params, options) => {
                let result = await this.call('quoteExactInputSingle', quoteExactInputSingleParams(params), options);
                return new eth_contract_3.BigNumber(result);
            };
            let quoteExactInputSingle_txData = async (params, options) => {
                let result = await this.txData('quoteExactInputSingle', quoteExactInputSingleParams(params), options);
                return result;
            };
            this.quoteExactInputSingle = Object.assign(quoteExactInputSingle_send, {
                call: quoteExactInputSingle_call,
                txData: quoteExactInputSingle_txData
            });
            let quoteExactOutputParams = (params) => [this.wallet.utils.stringToBytes(params.path), this.wallet.utils.toString(params.amountOut)];
            let quoteExactOutput_send = async (params, options) => {
                let result = await this.send('quoteExactOutput', quoteExactOutputParams(params), options);
                return result;
            };
            let quoteExactOutput_call = async (params, options) => {
                let result = await this.call('quoteExactOutput', quoteExactOutputParams(params), options);
                return new eth_contract_3.BigNumber(result);
            };
            let quoteExactOutput_txData = async (params, options) => {
                let result = await this.txData('quoteExactOutput', quoteExactOutputParams(params), options);
                return result;
            };
            this.quoteExactOutput = Object.assign(quoteExactOutput_send, {
                call: quoteExactOutput_call,
                txData: quoteExactOutput_txData
            });
            let quoteExactOutputSingleParams = (params) => [params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.sqrtPriceLimitX96)];
            let quoteExactOutputSingle_send = async (params, options) => {
                let result = await this.send('quoteExactOutputSingle', quoteExactOutputSingleParams(params), options);
                return result;
            };
            let quoteExactOutputSingle_call = async (params, options) => {
                let result = await this.call('quoteExactOutputSingle', quoteExactOutputSingleParams(params), options);
                return new eth_contract_3.BigNumber(result);
            };
            let quoteExactOutputSingle_txData = async (params, options) => {
                let result = await this.txData('quoteExactOutputSingle', quoteExactOutputSingleParams(params), options);
                return result;
            };
            this.quoteExactOutputSingle = Object.assign(quoteExactOutputSingle_send, {
                call: quoteExactOutputSingle_call,
                txData: quoteExactOutputSingle_txData
            });
        }
    }
    Quoter._abi = Quoter_json_1.default.abi;
    exports.Quoter = Quoter;
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/QuoterV2.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-uniswap-swap-router-contracts/contracts/QuoterV2.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH9", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH9", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "name": "quoteExactInput", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint160[]", "name": "sqrtPriceX96AfterList", "type": "uint160[]" }, { "internalType": "uint32[]", "name": "initializedTicksCrossedList", "type": "uint32[]" }, { "internalType": "uint256", "name": "gasEstimate", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "uint160", "name": "sqrtPriceLimitX96", "type": "uint160" }], "internalType": "struct IQuoterV2.QuoteExactInputSingleParams", "name": "params", "type": "tuple" }], "name": "quoteExactInputSingle", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint160", "name": "sqrtPriceX96After", "type": "uint160" }, { "internalType": "uint32", "name": "initializedTicksCrossed", "type": "uint32" }, { "internalType": "uint256", "name": "gasEstimate", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes", "name": "path", "type": "bytes" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "name": "quoteExactOutput", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint160[]", "name": "sqrtPriceX96AfterList", "type": "uint160[]" }, { "internalType": "uint32[]", "name": "initializedTicksCrossedList", "type": "uint32[]" }, { "internalType": "uint256", "name": "gasEstimate", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "components": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint24", "name": "fee", "type": "uint24" }, { "internalType": "uint160", "name": "sqrtPriceLimitX96", "type": "uint160" }], "internalType": "struct IQuoterV2.QuoteExactOutputSingleParams", "name": "params", "type": "tuple" }], "name": "quoteExactOutputSingle", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint160", "name": "sqrtPriceX96After", "type": "uint160" }, { "internalType": "uint32", "name": "initializedTicksCrossed", "type": "uint32" }, { "internalType": "uint256", "name": "gasEstimate", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "int256", "name": "amount0Delta", "type": "int256" }, { "internalType": "int256", "name": "amount1Delta", "type": "int256" }, { "internalType": "bytes", "name": "path", "type": "bytes" }], "name": "uniswapV3SwapCallback", "outputs": [], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "0x60c06040523480156200001157600080fd5b506040516200212c3803806200212c833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c612051620000db60003980610321525080610577528061095d5280610b9252506120516000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b610095610090366004611b2b565b610129565b6040516100a59493929190611eac565b60405180910390f35b6100b661031f565b6040516100a59190611def565b6100d66100d1366004611c49565b610343565b6040516100a59493929190611f54565b6100b6610575565b6100d66100fc366004611c49565b610599565b61009561010f366004611b2b565b610754565b610127610122366004611b91565b61092c565b005b6000606080600061013986610ae8565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610ae8565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610b17565b92509250925060008060008061025c6040518060a001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610343565b9350935093509350828b898151811061027157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106102b857fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102e58e610b48565b156102fa576102f38e610b50565b9d5061030a565b8c9b505050505050505050610316565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926103819290610b8b565b9050866080015173ffffffffffffffffffffffffffffffffffffffff16600014156103af5760408701516000555b60005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856103df8c60400151610bc9565b6000038c6080015173ffffffffffffffffffffffffffffffffffffffff1660001461040e578c60800151610434565b8761042d5773fffd8963efd1fc6a506488495d951d5263988d25610434565b6401000276a45b8d602001518e606001518f6000015160405160200161045593929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610484959493929190611e10565b6040805180830381600087803b15801561049d57600080fd5b505af19250505080156104eb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526104e891810190611b6e565b60015b610568573d808015610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b505a82039450886080015173ffffffffffffffffffffffffffffffffffffffff166000141561054c57600080555b610557818487610bfb565b97509750975097505050505061056e565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926105d79290610b8b565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856106098c60400151610bc9565b60808d015173ffffffffffffffffffffffffffffffffffffffff1615610633578c60800151610659565b876106525773fffd8963efd1fc6a506488495d951d5263988d25610659565b6401000276a45b8d600001518e606001518f6020015160405160200161067a93929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016106a9959493929190611e10565b6040805180830381600087803b1580156106c257600080fd5b505af1925050508015610710575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261070d91810190611b6e565b60015b610568573d80801561073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b505a82039450610557818487610bfb565b6000606080600061076486610ae8565b67ffffffffffffffff8111801561077a57600080fd5b506040519080825280602002602001820160405280156107a4578160200160208202803683370190505b5092506107b086610ae8565b67ffffffffffffffff811180156107c657600080fd5b506040519080825280602002602001820160405280156107f0578160200160208202803683370190505b50915060005b60008060006108048a610b17565b9250925092506000806000806108876040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610599565b9350935093509350828b898151811061089c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106108e357fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926109108e610b48565b156102fa5761091e8e610b50565b9d50505050505050506107f6565b600083138061093b5750600082135b61094457600080fd5b600080600061095284610b17565b9250925092506109847f0000000000000000000000000000000000000000000000000000000000000000848484610ccf565b5060008060008089136109ca578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a6000036109ff565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b9250925092506000610a12878787610b8b565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611c6b565b5050505050915091508515610abb57604051848152826020820152816040820152606081fd5b60005415610ad1576000548414610ad157600080fd5b604051858152826020820152816040820152606081fd5b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b60008080610b258482610cee565b9250610b32846014610dee565b9050610b3f846017610cee565b91509193909250565b516042111590565b8051606090610b859083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610ede565b92915050565b6000610bc17f0000000000000000000000000000000000000000000000000000000000000000610bbc8686866110c5565b611142565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610bf757600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c6b565b50939650610c9794508d935061127892505050565b91975095509050610cbf73ffffffffffffffffffffffffffffffffffffffff89168383611339565b9350869250505093509350935093565b6000610ce585610ce08686866110c5565b611991565b95945050505050565b600081826014011015610d6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610e6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ed557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610f5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610fc357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561105457604051915060008252602082016040526110bc565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561108d578051835260209283019201611075565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6110cd6119fa565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611105579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061118457600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014611318576044845110156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290611e75565b60405180910390fd5b600484019350838060200190518101906112e59190611bdf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190611e62565b8380602001905181019061132c9190611d02565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051600290810b908c900b816113c957fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051600290810b908d900b8161145857fe5b0560020b8161146357fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051600290810b908d900b816114ec57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051600290810b908e900b8161157b57fe5b0560020b8161158657fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051161180156116a457508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b5051600290810b908d900b8161169e57fe5b0760020b155b80156116b557508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b5051161180156117d257508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051600290810b908e900b816117cc57fe5b0760020b155b80156117e357508b60020b8d60020b125b95508160010b8460010b128061180f57508160010b8460010b14801561180f57508060ff168360ff1611155b1561182557839950829750819850809650611832565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611969578560010b8760010b14156118a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051169050611932816119c1565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61185e565b8115611976576001880397505b8215611983576001880397505b505050505050509392505050565b600061199d8383611142565b90503373ffffffffffffffffffffffffffffffffffffffff821614610b8557600080fd5b6000805b8215610b85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301909216916001016119c5565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611a2a578081fd5b8135611a3d611a3882611faf565b611f8b565b818152846020838601011115611a51578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b8114610b1257600080fd5b600060a08284031215611a8e578081fd5b60405160a0810181811067ffffffffffffffff82111715611aab57fe5b6040529050808235611abc8161201f565b81526020830135611acc8161201f565b602082015260408381013590820152606083013562ffffff81168114611af157600080fd5b6060820152611b0260808401611b0e565b60808201525092915050565b8035610b128161201f565b805161ffff81168114610b1257600080fd5b60008060408385031215611b3d578182fd5b823567ffffffffffffffff811115611b53578283fd5b611b5f85828601611a1a565b95602094909401359450505050565b60008060408385031215611b80578182fd5b505080516020909101519092909150565b600080600060608486031215611ba5578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bc9578182fd5b611bd586828701611a1a565b9150509250925092565b600060208284031215611bf0578081fd5b815167ffffffffffffffff811115611c06578182fd5b8201601f81018413611c16578182fd5b8051611c24611a3882611faf565b818152856020838501011115611c38578384fd5b610ce5826020830160208601611fef565b600060a08284031215611c5a578081fd5b611c648383611a7d565b9392505050565b600080600080600080600060e0888a031215611c85578283fd5b8751611c908161201f565b9650611c9e60208901611a6b565b9550611cac60408901611b19565b9450611cba60608901611b19565b9350611cc860808901611b19565b925060a088015160ff81168114611cdd578283fd5b60c08901519092508015158114611cf2578182fd5b8091505092959891949750929550565b600080600060608486031215611d16578081fd5b835192506020840151611d288161201f565b9150611d3660408501611a6b565b90509250925092565b60008151808452611d57816020860160208601611fef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611e5760a0830184611d3f565b979650505050505050565b600060208252611c646020830184611d3f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611f0257845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611ed0565b505084810360408601528651808252908201925081870190845b81811015611f3e57825163ffffffff1685529383019391830191600101611f1c565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611fa757fe5b604052919050565b600067ffffffffffffffff821115611fc357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561200a578181015183820152602001611ff2565b83811115612019576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461204157600080fd5b5056fea164736f6c6343000706000a"
    };
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/QuoterV2.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-uniswap-swap-router-contracts/contracts/QuoterV2.json.ts"], function (require, exports, eth_contract_4, QuoterV2_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuoterV2 = void 0;
    class QuoterV2 extends eth_contract_4.Contract {
        constructor(wallet, address) {
            super(wallet, address, QuoterV2_json_1.default.abi, QuoterV2_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH9], options);
        }
        assign() {
            let WETH9_call = async (options) => {
                let result = await this.call('WETH9', [], options);
                return result;
            };
            this.WETH9 = WETH9_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let uniswapV3SwapCallbackParams = (params) => [this.wallet.utils.toString(params.amount0Delta), this.wallet.utils.toString(params.amount1Delta), this.wallet.utils.stringToBytes(params.path)];
            let uniswapV3SwapCallback_call = async (params, options) => {
                let result = await this.call('uniswapV3SwapCallback', uniswapV3SwapCallbackParams(params), options);
                return;
            };
            this.uniswapV3SwapCallback = uniswapV3SwapCallback_call;
            let quoteExactInputParams = (params) => [this.wallet.utils.stringToBytes(params.path), this.wallet.utils.toString(params.amountIn)];
            let quoteExactInput_send = async (params, options) => {
                let result = await this.send('quoteExactInput', quoteExactInputParams(params), options);
                return result;
            };
            let quoteExactInput_call = async (params, options) => {
                let result = await this.call('quoteExactInput', quoteExactInputParams(params), options);
                return {
                    amountOut: new eth_contract_4.BigNumber(result.amountOut),
                    sqrtPriceX96AfterList: result.sqrtPriceX96AfterList.map(e => new eth_contract_4.BigNumber(e)),
                    initializedTicksCrossedList: result.initializedTicksCrossedList.map(e => new eth_contract_4.BigNumber(e)),
                    gasEstimate: new eth_contract_4.BigNumber(result.gasEstimate)
                };
            };
            let quoteExactInput_txData = async (params, options) => {
                let result = await this.txData('quoteExactInput', quoteExactInputParams(params), options);
                return result;
            };
            this.quoteExactInput = Object.assign(quoteExactInput_send, {
                call: quoteExactInput_call,
                txData: quoteExactInput_txData
            });
            let quoteExactInputSingle_send = async (params, options) => {
                let result = await this.send('quoteExactInputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            let quoteExactInputSingle_call = async (params, options) => {
                let result = await this.call('quoteExactInputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return {
                    amountOut: new eth_contract_4.BigNumber(result.amountOut),
                    sqrtPriceX96After: new eth_contract_4.BigNumber(result.sqrtPriceX96After),
                    initializedTicksCrossed: new eth_contract_4.BigNumber(result.initializedTicksCrossed),
                    gasEstimate: new eth_contract_4.BigNumber(result.gasEstimate)
                };
            };
            let quoteExactInputSingle_txData = async (params, options) => {
                let result = await this.txData('quoteExactInputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            this.quoteExactInputSingle = Object.assign(quoteExactInputSingle_send, {
                call: quoteExactInputSingle_call,
                txData: quoteExactInputSingle_txData
            });
            let quoteExactOutputParams = (params) => [this.wallet.utils.stringToBytes(params.path), this.wallet.utils.toString(params.amountOut)];
            let quoteExactOutput_send = async (params, options) => {
                let result = await this.send('quoteExactOutput', quoteExactOutputParams(params), options);
                return result;
            };
            let quoteExactOutput_call = async (params, options) => {
                let result = await this.call('quoteExactOutput', quoteExactOutputParams(params), options);
                return {
                    amountIn: new eth_contract_4.BigNumber(result.amountIn),
                    sqrtPriceX96AfterList: result.sqrtPriceX96AfterList.map(e => new eth_contract_4.BigNumber(e)),
                    initializedTicksCrossedList: result.initializedTicksCrossedList.map(e => new eth_contract_4.BigNumber(e)),
                    gasEstimate: new eth_contract_4.BigNumber(result.gasEstimate)
                };
            };
            let quoteExactOutput_txData = async (params, options) => {
                let result = await this.txData('quoteExactOutput', quoteExactOutputParams(params), options);
                return result;
            };
            this.quoteExactOutput = Object.assign(quoteExactOutput_send, {
                call: quoteExactOutput_call,
                txData: quoteExactOutput_txData
            });
            let quoteExactOutputSingle_send = async (params, options) => {
                let result = await this.send('quoteExactOutputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amount), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            let quoteExactOutputSingle_call = async (params, options) => {
                let result = await this.call('quoteExactOutputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amount), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return {
                    amountIn: new eth_contract_4.BigNumber(result.amountIn),
                    sqrtPriceX96After: new eth_contract_4.BigNumber(result.sqrtPriceX96After),
                    initializedTicksCrossed: new eth_contract_4.BigNumber(result.initializedTicksCrossed),
                    gasEstimate: new eth_contract_4.BigNumber(result.gasEstimate)
                };
            };
            let quoteExactOutputSingle_txData = async (params, options) => {
                let result = await this.txData('quoteExactOutputSingle', [[params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.amount), this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.sqrtPriceLimitX96)]], options);
                return result;
            };
            this.quoteExactOutputSingle = Object.assign(quoteExactOutputSingle_send, {
                call: quoteExactOutputSingle_call,
                txData: quoteExactOutputSingle_txData
            });
        }
    }
    QuoterV2._abi = QuoterV2_json_1.default.abi;
    exports.QuoterV2 = QuoterV2;
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/TokenValidator.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-uniswap-swap-router-contracts/contracts/TokenValidator.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factoryV2", "type": "address" }, { "internalType": "address", "name": "_positionManager", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [{ "internalType": "address[]", "name": "tokens", "type": "address[]" }, { "internalType": "address[]", "name": "baseTokens", "type": "address[]" }, { "internalType": "uint256", "name": "amountToBorrow", "type": "uint256" }], "name": "batchValidate", "outputs": [{ "internalType": "enum ITokenValidator.Status[]", "name": "isFotResults", "type": "uint8[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factoryV2", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "positionManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "uniswapV2Call", "outputs": [], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address[]", "name": "baseTokens", "type": "address[]" }, { "internalType": "uint256", "name": "amountToBorrow", "type": "uint256" }], "name": "validate", "outputs": [{ "internalType": "enum ITokenValidator.Status", "name": "", "type": "uint8" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "0x60c060405234801561001057600080fd5b506040516110e03803806110e083398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c61101c6100c4600039806103f65250806103d2525061101c6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806368e0d4e11161005057806368e0d4e1146100aa578063791b98bc146100bf578063be7672e5146100c757610067565b80630143aace1461006c57806310d1e85c14610095575b600080fd5b61007f61007a366004610b75565b6100e7565b60405161008c9190610dea565b60405180910390f35b6100a86100a3366004610bcf565b61016c565b005b6100b26103d0565b60405161008c9190610d7e565b6100b26103f4565b6100da6100d5366004610c60565b610418565b60405161008c9190610d9f565b6000805b8381101561015e5760006101208787878581811061010557fe5b905060200201602081019061011a9190610b3d565b866104d6565b9050600181600281111561013057fe5b14806101475750600281600281111561014557fe5b145b156101555791506101649050565b506001016100eb565b50600090505b949350505050565b60003390506000808273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190610b59565b8373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561023857600080fd5b505afa15801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610b59565b9150915060008088116102835781610285565b825b905060008061029687890189610ce9565b915091506000828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102d69190610d7e565b60206040518083038186803b1580156102ee57600080fd5b505afa158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610cd1565b03905081811461039e57604080518082018252600381527f464f540000000000000000000000000000000000000000000000000000000000602082015290517f08c379a00000000000000000000000000000000000000000000000000000000081526103959190600401610dfe565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590610e11565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608467ffffffffffffffff8111801561043157600080fd5b5060405190808252806020026020018201604052801561045b578160200160208202803683370190505b50905060005b858110156104cc5761049587878381811061047857fe5b905060200201602081019061048d9190610b3d565b8686866100e7565b8282815181106104a157fe5b602002602001019060028111156104b457fe5b908160028111156104c157fe5b905250600101610461565b5095945050505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561051457506000610895565b600061059e3073ffffffffffffffffffffffffffffffffffffffff166368e0d4e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190610b59565b868661089c565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0dfe168100000000000000000000000000000000000000000000000000000000179052905191925060009173ffffffffffffffffffffffffffffffffffffffff84169161061d91610d62565b6000604051808303816000865af19150503d806000811461065a576040519150601f19603f3d011682016040523d82523d6000602084013e61065f565b606091505b5091505080516000141561067857600092505050610895565b60008180602001905181019061068e9190610b59565b90506000808273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146106ce576000876106d2565b8660005b9150915060008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107119190610d7e565b60206040518083038186803b15801561072957600080fd5b505afa15801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190610cd1565b905060008690508073ffffffffffffffffffffffffffffffffffffffff1663022c0d9f858530868e60405160200161079a929190610e7f565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016107c89493929190610e8d565b600060405180830381600087803b1580156107e257600080fd5b505af19250505080156107f3575060015b610863576107ff610f08565b8061080a5750610859565b61081381610987565b1561082957600198505050505050505050610895565b610832816109ea565b1561084857600298505050505050505050610895565b600098505050505050505050610895565b3d6000803e3d6000fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590610e48565b9392505050565b60008060006108ab8585610a56565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60408051808201909152600381527f464f5400000000000000000000000000000000000000000000000000000000006020918201528151908201207f0d441c7cb74abc94cc606c98870ca9174ef5b167b2f7ffed505658cf4574b003145b919050565b60408051808201909152600f8082527f5452414e534645525f4641494c45440000000000000000000000000000000000602083015282516000929180821015610a3957600093505050506109e5565b602092830181902091819003850190920191909120149050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a9257600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610acc578284610acf565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610af457600080fd5b9250929050565b60008083601f840112610b0c578182fd5b50813567ffffffffffffffff811115610b23578182fd5b6020830191508360208083028501011115610af457600080fd5b600060208284031215610b4e578081fd5b813561089581610fea565b600060208284031215610b6a578081fd5b815161089581610fea565b60008060008060608587031215610b8a578283fd5b8435610b9581610fea565b9350602085013567ffffffffffffffff811115610bb0578384fd5b610bbc87828801610afb565b9598909750949560400135949350505050565b600080600080600060808688031215610be6578081fd5b8535610bf181610fea565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610c1b578283fd5b818801915088601f830112610c2e578283fd5b813581811115610c3c578384fd5b896020828501011115610c4d578384fd5b9699959850939650602001949392505050565b600080600080600060608688031215610c77578081fd5b853567ffffffffffffffff80821115610c8e578283fd5b610c9a89838a01610afb565b90975095506020880135915080821115610cb2578283fd5b50610cbf88828901610afb565b96999598509660400135949350505050565b600060208284031215610ce2578081fd5b5051919050565b60008060408385031215610cfb578182fd5b50508035926020909101359150565b60008151808452610d22816020860160208601610ed2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60038110610d5e57fe5b9052565b60008251610d74818460208701610ed2565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610dde57610dce838551610d54565b9284019291840191600101610dbb565b50909695505050505050565b60208101610df88284610d54565b92915050565b6000602082526108956020830184610d0a565b60208082526007908201527f556e6b6e6f776e00000000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b918252602082015260400190565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff8416604083015260806060830152610ec86080830184610d0a565b9695505050505050565b60005b83811015610eed578181015183820152602001610ed5565b83811115610efc576000848401525b50505050565b60e01c90565b600060443d1015610f1857610fe7565b600481823e6308c379a0610f2c8251610f02565b14610f3657610fe7565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d67ffffffffffffffff8160248401118184111715610f845750505050610fe7565b82840192508251915080821115610f9e5750505050610fe7565b503d83016020828401011115610fb657505050610fe7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681016020016040529150505b90565b73ffffffffffffffffffffffffffffffffffffffff8116811461100c57600080fd5b5056fea164736f6c6343000706000a"
    };
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/TokenValidator.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-uniswap-swap-router-contracts/contracts/TokenValidator.json.ts"], function (require, exports, eth_contract_5, TokenValidator_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenValidator = void 0;
    class TokenValidator extends eth_contract_5.Contract {
        constructor(wallet, address) {
            super(wallet, address, TokenValidator_json_1.default.abi, TokenValidator_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factoryV2, params.positionManager], options);
        }
        assign() {
            let factoryV2_call = async (options) => {
                let result = await this.call('factoryV2', [], options);
                return result;
            };
            this.factoryV2 = factoryV2_call;
            let positionManager_call = async (options) => {
                let result = await this.call('positionManager', [], options);
                return result;
            };
            this.positionManager = positionManager_call;
            let uniswapV2CallParams = (params) => [params.param1, this.wallet.utils.toString(params.amount0), this.wallet.utils.toString(params.param3), this.wallet.utils.stringToBytes(params.data)];
            let uniswapV2Call_call = async (params, options) => {
                let result = await this.call('uniswapV2Call', uniswapV2CallParams(params), options);
                return;
            };
            this.uniswapV2Call = uniswapV2Call_call;
            let batchValidateParams = (params) => [params.tokens, params.baseTokens, this.wallet.utils.toString(params.amountToBorrow)];
            let batchValidate_send = async (params, options) => {
                let result = await this.send('batchValidate', batchValidateParams(params), options);
                return result;
            };
            let batchValidate_call = async (params, options) => {
                let result = await this.call('batchValidate', batchValidateParams(params), options);
                return result.map(e => new eth_contract_5.BigNumber(e));
            };
            let batchValidate_txData = async (params, options) => {
                let result = await this.txData('batchValidate', batchValidateParams(params), options);
                return result;
            };
            this.batchValidate = Object.assign(batchValidate_send, {
                call: batchValidate_call,
                txData: batchValidate_txData
            });
            let validateParams = (params) => [params.token, params.baseTokens, this.wallet.utils.toString(params.amountToBorrow)];
            let validate_send = async (params, options) => {
                let result = await this.send('validate', validateParams(params), options);
                return result;
            };
            let validate_call = async (params, options) => {
                let result = await this.call('validate', validateParams(params), options);
                return new eth_contract_5.BigNumber(result);
            };
            let validate_txData = async (params, options) => {
                let result = await this.txData('validate', validateParams(params), options);
                return result;
            };
            this.validate = Object.assign(validate_send, {
                call: validate_call,
                txData: validate_txData
            });
        }
    }
    TokenValidator._abi = TokenValidator_json_1.default.abi;
    exports.TokenValidator = TokenValidator;
});
define("@scom/scom-uniswap-swap-router-contracts/contracts/index.ts", ["require", "exports", "@scom/scom-uniswap-swap-router-contracts/contracts/SwapRouter02.ts", "@scom/scom-uniswap-swap-router-contracts/contracts/MixedRouteQuoterV1.ts", "@scom/scom-uniswap-swap-router-contracts/contracts/Quoter.ts", "@scom/scom-uniswap-swap-router-contracts/contracts/QuoterV2.ts", "@scom/scom-uniswap-swap-router-contracts/contracts/TokenValidator.ts"], function (require, exports, SwapRouter02_1, MixedRouteQuoterV1_1, Quoter_1, QuoterV2_1, TokenValidator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenValidator = exports.QuoterV2 = exports.Quoter = exports.MixedRouteQuoterV1 = exports.SwapRouter02 = void 0;
    Object.defineProperty(exports, "SwapRouter02", { enumerable: true, get: function () { return SwapRouter02_1.SwapRouter02; } });
    Object.defineProperty(exports, "MixedRouteQuoterV1", { enumerable: true, get: function () { return MixedRouteQuoterV1_1.MixedRouteQuoterV1; } });
    Object.defineProperty(exports, "Quoter", { enumerable: true, get: function () { return Quoter_1.Quoter; } });
    Object.defineProperty(exports, "QuoterV2", { enumerable: true, get: function () { return QuoterV2_1.QuoterV2; } });
    Object.defineProperty(exports, "TokenValidator", { enumerable: true, get: function () { return TokenValidator_1.TokenValidator; } });
});
define("@scom/scom-uniswap-swap-router-contracts", ["require", "exports", "@scom/scom-uniswap-swap-router-contracts/contracts/index.ts"], function (require, exports, Contracts) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contracts = void 0;
    exports.Contracts = Contracts;
});
